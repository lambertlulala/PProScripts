
function copyPproconfTo(dstPath)
    local pproconf = pprofolder ++ "pproconf.pcf"
    if (file.copy(pproconf, dstPath)) do
        *Message Successfully copy pproconf.pcf to &(dstPath)
    else
        *Message Failed to copy pproconf.pcf to ++ &(dstPath)
    endif
endfunction

function emptyRecyclebin()
    do("pwsh.exe", ?+-Command "Clear-RecycleBin -Force"+)
endfunction

function showRecyclebin()
    do("shell:RecycleBinFolder")
endfunction

function openWithTig()
    local path = inputfolder
    if (path) do
        path = path.replacechars("\\", "/")
        do("tig.exe", "-C \"" ++ path ++ "\"")
    endif
endfunction

function copyNewGUID()
    do("pwsh.exe", "-Command [guid]::NewGuid().toString() | clip")
endfunction

function downloadMP3FromYoutube()
    local folder = inputfolder
    if (folder) do
        local url = input("Youtube URL to download")
        if (!url) do
            quit
        endif

        local params = "--extract-audio --audio-format mp3 " ++ url ++  " -P " ++ "\"" ++ folder ++ "\""
        do("yt-dlp.exe", params)
    endif
endfunction

function showOrgAgenda(barName)
    if (cl.exists(barName)) do
        local hBar = cl.getBarHandle(barName)
        win.setfocus(hBar)
    endif

    local result
    local tmpFile = env("TEMP") ++ "\\tmp_org_agenda.txt"
    file.runwait(60000, "cmd.exe", ?+/c wsl.exe emacs -batch -l ~/.emacs.d/init.el -eval '(org-batch-agenda "a" org-agenda-span 30)' > + ++ tmpFile, "", "hide")
    result = file.readall(tmpFile)
    file.deletenorecycle(tmpFile)
    pickstring(result, "Org Agenda", 2)
endfunction

function convertToLinuxPath(path)
    local resultPath

    if (find(path, ?+\\wsl+) != -1) do
        local cvt = path.replacechars("\\", "/")
        local pos = 2
        cvt = slice(cvt, pos, length(cvt) - 1)
        for (local i = 0; i < 2; i++)
            pos = find(cvt, "/")
            if (pos != -1) do
                cvt = slice(cvt, pos + 1, length(cvt) - 1)
            endif
        endfor
        resultPath = "/" ++ cvt
    else
        local command = "wsl wslpath " ++ "\"" ++ path ++ "\""
        local tmpFile = env("TEMP") ++ "\\tmp_convert.txt"
        file.runwait(30000, "cmd.exe", "/c " ++ command ++ " > " ++ tmpFile, "", "hide")
        resultPath = file.readall(tmpFile)
        file.deletenorecycle(tmpFile)
    endif

    return(resultPath.removechars("\r\n"))
endfunction

function openWithMagit()
    local repo = inputfolder
    if (repo) do
        local path = convertToLinuxPath(repo)
        do("wt.exe", "new-tab wsl emacs -nw -eval '(magit-status " ++ "\\\"" ++ path.removechars("\r\n") ++ "\\\")'")
    endif
endfunction

function editWithEmacs(path)
    local cvtPath = convertToLinuxPath(path)
    do("wt.exe", "new-tab wsl emacs -nw \"" ++ cvtPath ++ "\"")
endfunction

function editWithEmacsDaemon(path)
    local cvtPath = convertToLinuxPath(path)
    do("wt.exe", "new-tab wsl emacsclient -nw -a '' \"" ++ cvtPath ++ "\"")
endfunction

function editWithBowPad(path)
    do(?+C:\Program Files\BowPad\BowPad.exe+, "/path:\"" ++ path ++ "\"")
endfunction

function editWithAkelPad(path)
    do(?+C:\Program Files\AkelPad\AkelPad.exe+, "/OpenFile \"" ++ path ++ "\"")
endfunction

//function everythingSearch(searchPattern)
//    local searchResult
//    pipe.listen_off
//    pipe.listen_on("powerpro", 0, "searchResult")
//    file.runwait(0, "cmd.exe", "/c es.exe " ++ searchPattern ++ ?+ > \\.\pipe\Powerpro+, "", "hide")
//    pipe.listen_off
//    return(ansitoutf8(searchResult))
//endfunction

function everythingSearchRedirectToTmpFile(searchPattern)
    local searchResult
    local tmpFile = env("TEMP") ++ "\\tmp_es_result.txt"
    file.runwait(60000, "es.exe", searchPattern ++ " -export-txt " ++ tmpFile, "", "hide")
    searchResult = file.readall(tmpFile)
    file.deletenorecycle(tmpFile)
    return(searchResult)
endfunction

function filterClipsWithES(text)
    local searchPattern = pprofolder ++ "clip\\*.powerproclip" ++ " utf16content:" ++ "\"" ++ text ++ "\""
    local results = everythingSearchRedirectToTmpFile(searchPattern)
    return(results)
endfunction

function searchClipTextWithES(clipFolder, clipFolderLen, inputTitle)
    local result = 0
    local textToSearch = input("Search clip text with ES")
    if (textToSearch) do
        local filteredResult = filterClipsWithES(textToSearch)
        local filteredCandidates
        for each line clip in filteredResult
            local item = remove(clip, clipFolderLen)
            local pos = revfind(item, ".PowerProClip")
            item = slice(item, pos)
            filteredCandidates = filteredCandidates ++ item ++ "\r"
        endfor

        setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
        local pickedResult = pickstring(filteredCandidates, inputTitle, 2)
        if (pickedResult) do
            clip.load(clipFolder ++ pickedResult ++ ".PowerProClip")
            result = 1
        endif
    endif

    return(result)
endfunction

function searchClipTextWithPwsh(clipFolder, clipFolderLen, inputTitle)
    local result = 0
    local textToSearch = input("Search clip text with Pwsh")
    if (textToSearch) do
        local filteredResult = searchTextInAllClipFiles(textToSearch)
        local filteredCandidates
        for each line clip in filteredResult
            local item = remove(clip, clipFolderLen)
            local pos = revfind(item, ".PowerProClip")
            item = slice(item, pos)
            filteredCandidates = filteredCandidates ++ item ++ "\r"
        endfor

        setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
        local pickedResult = pickstring(filteredCandidates, inputTitle, 2)
        if (pickedResult) do
            clip.load(clipFolder ++ pickedResult ++ ".PowerProClip")
            result = 1
        endif
    endif

    return(result)
endfunction

function searchFile(searchPattern)
    local searchResult
    local tmpFile = env("TEMP") ++ "\\tmp_search_result.txt"
    file.runwait(3600000, "cmd.exe", "/c dir /s/b/O-D " ++ "\"" ++ searchPattern ++ "\"" ++ " > " ++ tmpFile, "", "hide")
    searchResult = file.readall(tmpFile)
    file.deletenorecycle(tmpFile)
    return(ansitoutf8(searchResult))
endfunction

function listAllClipFiles(baseFolder)
    local searchResult
    local tmpFile = env("TEMP") ++ "\\tmp_search_result.txt"
    local folder = trim(baseFolder, "\\", 2)
    local cmd = "cd " ++ "\"" ++ folder ++ "\"" ++ " && Get-ChildItem -Recurse \"*.powerproclip\" | Sort-Object LastWriteTime -Descending | ForEach-Object { $_.FullName }"
    file.runwait(3600000, "pwsh.exe", "-Command " ++ cmd ++ " > " ++ tmpFile, "", "hide")
    searchResult = file.readall(tmpFile)
    file.deletenorecycle(tmpFile)
    return(searchResult)
endfunction

function searchTextInAllClipFiles(searchText)
    local searchResult
    local tmpFile = env("TEMP") ++ "\\tmp_search_text_result.txt"
    local baseFolder = pprofolder ++ "clip"
    local cmd = "cd " ++ "\"" ++ baseFolder ++ "\"" ++ " && Get-ChildItem -Recurse \"*.powerproclip\" | Select-String -Pattern " ++ "\"" ++ searchText ++ "\"" ++ " -Encoding \"utf-16\" | Select-Object -ExpandProperty Path"
    file.runwait(3600000, "pwsh.exe", "-Command " ++ cmd ++ " > " ++ tmpFile, "", "hide")
    searchResult = file.readall(tmpFile)
    file.deletenorecycle(tmpFile)
    return(searchResult)
endfunction

function searchAndPickResult(barName)
    local result
    for (local run = 1; run;)
        local searchPattern = input("Search")
        if (searchPattern) do
            if (cl.exists(barName)) do
                local hBar = cl.getBarHandle(barName)
                win.setfocus(hBar)
            endif

            local searchResult = everythingSearchRedirectToTmpFile(searchPattern)
            if (searchResult) do
                setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
                result = pickstring(searchResult, "Pick Result", 2)
                if (result) do
                    run = 0
                endif
            endif
        else
            run = 0
        endif
    endfor

    return(result)
endfunction

function searchAndEditWithEmacs(barName)
    local fileToEdit = searchAndPickResult(barName)
    if (fileToEdit) do
        editWithEmacs(fileToEdit)
    endif
endfunction

function searchAndEditWithEmacsDaemon(barName)
    local fileToEdit = searchAndPickResult(barName)
    if (fileToEdit) do
        editWithEmacsDaemon(fileToEdit)
    endif
endfunction

function searchAndEditWithBowPad(barName)
    local fileToEdit = searchAndPickResult(barName)
    if (fileToEdit) do
        editWithBowPad(fileToEdit)
    endif
endfunction

function searchAndEditWithAkelPad(barName)
    local fileToEdit = searchAndPickResult(barName)
    if (fileToEdit) do
        editWithAkelPad(fileToEdit)
    endif
endfunction

function switchToWindow(barName, width, height)
    local inputTitle = "Switch to window"
    local inputHandle = window("visiblewindow", "*" ++ inputTitle ++ "*")
    if (win.exists(inputHandle)) do
        local rect = win.getrect(inputHandle)
        local x = word(rect, 1)
        local y = word(rect, 2)
        win.sendmouse("ab", x, y, "lc")
        quit
    endif

    local wlist = window("visiblewindow", "*")
    local windowList
    for (local j = 1; ; j++)
        local handle = word(wlist, j)
        if (handle == "") do
            break
        endif

        local exStyle = win.getexstyle(handle)
        if ((exStyle & 0x080) && !(exStyle & 0x040000)) do
            continue
        endif

        local text = win.gettext(handle)
        if (text != "") do
            local fullPath = window("exefullpath", handle)
            local display = "[" ++ handle ++ "]    " ++ text ++ "    (" ++ fullPath ++ ")"
            windowList = windowList ++ display ++ "\r"
        endif
    endfor

    if (cl.exists(barName)) do
        local hBar = cl.getBarHandle(barName)
        win.setfocus(hBar)
    endif

    local x = win.vscreenwidth / 2 - width / 2
    local y = win.vscreenheight / 2 - height / 2
    setnextdialogpos(x, y, width, height, "topmost")
    local sel = pickstring(windowList, inputTitle, 2)
    if (sel) do
        local idxBeg = find(sel, "[")
        local idxEnd = find(sel, "]")
        if (idxBeg != -1 && idxEnd != -1 && idxEnd -1 >= idxBeg) do
            local handle = slice(sel, idxBeg + 1, idxEnd - 1)
            window.show(handle)
        endif
    else
        win.resetfocus(15)
    endif
endfunction

function navigateToFolder(barName)
    local item = searchAndPickResult(barName)
    if (!item) do
        quit
    endif

    local folder
    local lastChar = slice(item, -1)
    if (lastChar == "\\") do
        item = slice(item, 0, length(item) - 2)
    endif

    if (file.isfolder(item)) do
        folder = item
    else
        local pos = revfind(item, "\\")
        if (pos != -1) do
            folder = slice(item, 0, pos - 1)
        endif
    endif

    *Keys {to *} ^l{w1}&(folder){enter}
endfunction

function createClipInfoFiles()
    local clipInfo = class.makestruct("clipDataFile clipTextFile")
    local basePath = env("TEMP") ++ "\\" ++ Date.now ++ "_" ++ random(86400)
    clipInfo.clipDataFile =  basePath ++ ".powerproclip"
    clipInfo.clipTextFile = basePath ++ ".txt"

    clip.save(clipInfo.clipDataFile)
    if (clip.HasFormat("TEXT") || clip.HasFormat("UNICODETEXT")) do
        clip.tofile(clipInfo.clipTextFile, 1, "utf8")
    else
        local fp = file.open(clipInfo.clipTextFile, "w")
        if (fp) do
            fp.writestring("(non-text)")
            fp.close
        endif
    endif

    return(clipInfo)
endfunction

function deleteClipInfoFiles(clipInfo)
    file.deletenorecycle(clipInfo.clipDataFile)
    file.deletenorecycle(clipInfo.clipTextFile)
endfunction

function insertClipIntoDb(clipInfo)
    local sqlStatement = "INSERT INTO Clipboard(TextData, BinaryData) VALUES (readfile('" ++ clipInfo.clipTextFile ++ "'), readfile('" ++ clipInfo.clipDataFile ++ "'));"
    local db = getDbPath()
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function onCapturingClip()
    local clipInfo = createClipInfoFiles()
    insertClipIntoDb(clipInfo)
    deleteClipInfoFiles(clipInfo)
endfunction

function createClipboardDbIfNonexistent()
    local sqlStatement = ?+CREATE TABLE IF NOT EXISTS "Clipboard" ("ClipId" INTEGER PRIMARY KEY AUTOINCREMENT, "TextData" TEXT NOT NULL, "BinaryData" BLOB NOT NULL, "CreatedAt" TEXT NOT NULL DEFAULT (DATETIME('now', 'localtime')), "ClipTags" TEXT);+
    local db = "\"" ++ getDbPath() ++ "\""
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    do("sqlite3.exe", cmd)
endfunction

function listClipsFromDb()
    local db = "\"" ++ getDbPath() ++ "\""
    local tmpResultFile = env("TEMP") ++ "\\tmp_clip_db_result.txt"
    local outputCmd = "\".output " ++ tmpResultFile ++ "\""
    local cmd = db ++ " " ++ outputCmd ++ " \"" ++ "SELECT printf('[%d][TAGS: %s] %.256s', ClipId, ClipTags, CASE WHEN instr(TextData, '\n') > 0 THEN replace(replace(TextData, '\n', ' '), '\r', ' ') ELSE TextData END) AS FormattedOutput FROM Clipboard ORDER BY ClipId DESC;" ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
    local clips = file.readall(tmpResultFile)
    file.deletenorecycle(tmpResultFile)
    return(clips)
endfunction

function getDbPath()
    return(pprofolder ++ "pproclip.db")
endfunction

function handleClipboardInDb(barName)
    local inputTitle = "Select clipboard item"
    local inputHandle = window("visiblewindow", "*" ++ inputTitle ++ "*")
    if (win.exists(inputHandle)) do
        local rect = win.getrect(inputHandle)
        local x = word(rect, 1)
        local y = word(rect, 2)
        win.sendmouse("ab", x, y, "lc")
        quit
    endif

    if (cl.exists(barName)) do
        win.setfocus(cl.getBarHandle(barName))
    endif

    for (local run = 1; run;)
        local candidates = listClipsFromDb()
        setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
        local clip = pickstring(candidates, inputTitle, 2)
        if (clip) do
            local clipId = getClipId(clip)
            run = doActionOnClip(clipId, inputTitle)
        else
            run = 0
        endif
    endfor

    win.resetfocus(15)
endfunction

function getClipId(srcClip)
    local clipId = 0
    local idxBeg = find(srcClip, "[")
    local idxEnd = find(srcClip, "]")
    if (idxBeg != -1 && idxEnd != -1 && idxEnd -1 >= idxBeg) do
        clipId = slice(srcClip, idxBeg + 1, idxEnd - 1)
    endif
    return(clipId)
endfunction

function createPProClipFileFromDb(clipId)
    local db = "\"" ++ getDbPath() ++ "\""
    local pproclipFile = env("TEMP") ++ "\\tmp_clip_from_db.powerproclip"
    local sqlStatement = "SELECT writefile('"++ pproclipFile  ++ "', BinaryData) FROM Clipboard WHERE ClipId = " ++ clipId ++ " ;"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
    return(pproclipFile)
endfunction

function updateClipInDb(clipId, utf8TextFile, pproClipFile)
    local db = "\"" ++ getDbPath() ++ "\""
    local pproclipFile = env("TEMP") ++ "\\tmp_clip_from_db.powerproclip"
    local sqlStatement = "UPDATE Clipboard SET TextData = readfile('" ++ utf8TextFile ++ "'), BinaryData = readfile('" ++ pproClipFile ++ "') WHERE ClipId = " ++ clipId ++ " ;"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function updateClipTagInDb(clipId, clipTags)
    local db = "\"" ++ getDbPath() ++ "\""
    local pproclipFile = env("TEMP") ++ "\\tmp_clip_from_db.powerproclip"
    local sqlStatement = "UPDATE Clipboard SET ClipTags = '" ++ clipTags ++ "' WHERE ClipId = " ++ clipId ++ " ;"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function deleteClipInDb(clipId)
    local db = "\"" ++ getDbPath() ++ "\""
    local sqlStatement = "DELETE FROM Clipboard WHERE ClipId = " ++ clipId ++ ";"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function deleteClipsWithoutTagsInDb()
    local db = "\"" ++ getDbPath() ++ "\""
    local sqlStatement = "DELETE FROM Clipboard WHERE ClipTags IS NULL OR ClipTags = '';"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function deleteClipDb()
    file.deletenorecycle(getDbPath())
endfunction

function searchClipsInDb(text)
    local db = "\"" ++ getDbPath() ++ "\""
    local tmpResultFile = env("TEMP") ++ "\\tmp_clip_db_search_result.txt"
    local outputCmd = "\".output " ++ tmpResultFile ++ "\""
    local cmd = db ++ " " ++ outputCmd ++ " \"" ++ "SELECT printf('[%d][TAGS: %s] %.256s', ClipId, ClipTags, CASE WHEN instr(TextData, '\n') > 0 THEN replace(replace(TextData, '\n', ' '), '\r', ' ') ELSE TextData END) FROM Clipboard WHERE TextData LIKE '%" ++ text ++ "%';"
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
    local clips = file.readall(tmpResultFile)
    file.deletenorecycle(tmpResultFile)
    return(clips)
endfunction

function searchClipsWithTagsInDb(tags)
    local db = "\"" ++ getDbPath() ++ "\""
    local tmpResultFile = env("TEMP") ++ "\\tmp_clip_db_search_result.txt"
    local outputCmd = "\".output " ++ tmpResultFile ++ "\""
    local cmd = db ++ " " ++ outputCmd ++ " \"" ++ "SELECT printf('[%d][TAGS: %s] %.256s', ClipId, ClipTags, CASE WHEN instr(TextData, '\n') > 0 THEN replace(replace(TextData, '\n', ' '), '\r', ' ') ELSE TextData END) FROM Clipboard WHERE ClipTags LIKE '%" ++ tags ++ "%';"
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
    local clips = file.readall(tmpResultFile)
    file.deletenorecycle(tmpResultFile)
    return(clips)
endfunction

function deleteAllClipsInDb()
    local db = "\"" ++ getDbPath() ++ "\""
    local sqlStatement = "DELETE FROM Clipboard; VACUUM;"
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function keepLastClipsInDb(numClipsToKeep, withTags)
    local db = "\"" ++ getDbPath() ++ "\""
    local sqlStatement
    if (withTags == 0) do
        sqlStatement = "DELETE FROM Clipboard WHERE ClipId NOT IN (SELECT ClipId FROM Clipboard ORDER BY ClipId DESC LIMIT " ++ numClipsToKeep ++ ");"
    else
        sqlStatement = "DELETE FROM Clipboard WHERE ClipId NOT IN (SELECT ClipId FROM Clipboard WHERE ClipTags IS NULL OR ClipTags = '' ORDER BY ClipId DESC LIMIT " ++ numClipsToKeep ++ ") AND (ClipTags IS NULL OR ClipTags = '');"
    endif
    local cmd = db ++ " \"" ++ sqlStatement ++ "\""
    file.runwait(3600000, "sqlite3.exe", cmd, "", "hide")
endfunction

function doActionOnClip(clipId, inputTitle)
    local keepRun = 0
    local action = pickstring("Preview\rShow text\rCopy\rCopy as text\rEdit\rEdit clip tags\rSave as BMP\rDelete\rSearch text\rSearch clips with tags\rDelete clips without tags\rClear all clips\rKeep last clips\rList formats", inputTitle, 2)
    if (action) do
        local pproClipFile = createPProClipFileFromDb(clipId)
        switch (_pickedline_)
            case 1
                win.mouseto(win.vscreenwidth / 2, win.vscreenheight / 2)
                menu.folder(pproClipFile ++ ".*", "center")
                keepRun = 1
                break
            case 2
                local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                local tmpNotePath = env("TEMP") ++ "\\tmp_show.txt"
                clip.save(currentData)
                clip.load(pproClipFile)
                clip.tofile(tmpNotePath, 1, "utf8")
                clip.load(currentData)
                file.deletenorecycle(currentData)
                note.open(tmpNotePath, "", 2)
                break
            case 3
                clip.load(pproClipFile)
                break
            case 4
                local tmpCopyPath = env("TEMP") ++ "\\tmp_copy.txt"
                clip.load(pproClipFile)
                clip.tofile(tmpCopyPath, 1, "utf8")
                clip.load(tmpCopyPath)
                file.deletenorecycle(tmpCopyPath)
                break
            case 5
                local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                local tmpClipPath = env("TEMP") ++ "\\tmp_edit_clip.txt"
                clip.save(currentData)
                clip.load(pproClipFile)
                clip.tofile(tmpClipPath, 1, "utf8")

                file.runwait(3600000, "notepad.exe", tmpClipPath)
                clip.load(tmpClipPath)
                clip.save(pproClipFile)
                updateClipInDb(clipId, tmpClipPath, pproClipFile)

                clip.load(currentData)
                file.deletenorecycle(currentData)
                file.deletenorecycle(tmpClipPath)
                keepRun = 1
                break
            case 6
                local clipTags = input("Edit clip tags")
                if (clipTags) do
                    updateClipTagInDb(clipId, clipTags)
                endif
                break
            case 7
                local pathToSave = inputsaveaspath
                if (pathToSave) do
                    local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                    clip.save(currentData)
                    clip.load(pproClipFile)
                    clip.bmptofile(pathToSave)
                    clip.load(currentData)
                    file.deletenorecycle(currentData)
                endif
                break
            case 8
                deleteClipInDb(clipId)
                break
            case 9
                keepRun = 1
                local textToSearch = input("Search clip text")
                if (textToSearch) do
                    setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
                    local filteredCandidates = searchClipsInDb(textToSearch)
                    local pickedClip = pickstring(filteredCandidates, inputTitle, 2)
                    if (pickedClip) do
                        local clipId = getClipId(pickedClip)
                        local pproClipFile = createPProClipFileFromDb(clipId)
                        clip.load(pproClipFile)
                        keepRun = 0
                    endif
                endif
                break
            case 10
                keepRun = 1
                local tagsToSearch = input("Search clips with tags")
                if (tagsToSearch) do
                    setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
                    local filteredCandidates = searchClipsWithTagsInDb(tagsToSearch)
                    local pickedClip = pickstring(filteredCandidates, inputTitle, 2)
                    if (pickedClip) do
                        local clipId = getClipId(pickedClip)
                        local pproClipFile = createPProClipFileFromDb(clipId)
                        clip.load(pproClipFile)
                        keepRun = 0
                    endif
                endif
                break
            case 11
                deleteClipsWithoutTagsInDb()
                break
            case 12
                deleteAllClipsInDb()
                break
            case 13
                local numClipsToKeep = input("Number of clips to keep")
                if (numClipsToKeep > 0) do
                    keepLastClipsInDb(numClipsToKeep, 1)
                endif
                break
            case 14
                Message Clip format: &(clip.ListFormats())
                break
        endswitch

        file.deletenorecycle(pproClipFile)
    else
        keepRun = 1
    endif
    return(keepRun)
endfunction

function handleClipboard(barName)
    local inputTitle = "Select clipboard item"
    local inputHandle = window("visiblewindow", "*" ++ inputTitle ++ "*")
    if (win.exists(inputHandle)) do
        local rect = win.getrect(inputHandle)
        local x = word(rect, 1)
        local y = word(rect, 2)
        win.sendmouse("ab", x, y, "lc")
        quit
    endif

    if (cl.exists(barName)) do
        win.setfocus(cl.getBarHandle(barName))
    endif

    local baseFolder = pprofolder ++ "clip\\"
    local baseFolderLen = length(baseFolder)

    //local searchResult = searchFile(baseFolder ++ "*.PowerProClip")
    //local searchResult
    //if (file.findexe("es.exe")) do
    //    searchResult = everythingSearchRedirectToTmpFile(baseFolder ++ "*.PowerProClip" ++ " -sort-date-created")
    //else
    //    searchResult = listAllClipFiles(baseFolder)
    //endif

    local searchResult = listAllClipFiles(baseFolder)
    local candidates
    for each line clip in searchResult
        local item = remove(clip, baseFolderLen)
        local pos = revfind(item, ".PowerProClip")
        item = slice(item, pos)
        candidates = candidates ++ item ++ "\r"
    endfor

    for (local run = 1; run;)
        setnextdialogpos(win.vscreenwidth / 2 - 400, win.vscreenheight / 2 - 200, 800, 400, "topmost")
        local result = pickstring(candidates, inputTitle, 2)
        if (result) do
            result = baseFolder ++ result ++ ".PowerProClip"
            local action = pickstring("Preview\rShow text\rCopy\rCopy as text\rEdit\rSave as BMP\rExplore\rDelete\rMove\rSearch text\rSearch with grepWin\rSearch with dnGrep\rSearch clip text with Pwsh\rClear recent", inputTitle, 2)
            if (action) do
                local keepRun = 0
                switch (_pickedline_)
                    case 1
                        win.mouseto(win.vscreenwidth / 2, win.vscreenheight / 2)
                        menu.folder(result ++ ".*", "center")
                        keepRun = 1
                        break
                    case 2
                        local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                        local tmpNotePath = env("TEMP") ++ "\\tmp_show.txt"
                        clip.save(currentData)
                        clip.load(result)
                        clip.tofile(tmpNotePath, 1, "utf8")
                        clip.load(currentData)
                        file.deletenorecycle(currentData)
                        note.open(tmpNotePath, "", 2)
                        break
                    case 3
                        clip.load(result)
                        break
                    case 4
                        local tmpCopyPath = env("TEMP") ++ "\\tmp_copy.txt"
                        clip.load(result)
                        clip.tofile(tmpCopyPath, 1, "utf8")
                        clip.load(tmpCopyPath)
                        file.deletenorecycle(tmpCopyPath)
                        break
                    case 5
                        local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                        local tmpClipPath = env("TEMP") ++ "\\tmp_edit_clip.txt"
                        clip.save(currentData)
                        clip.load(result)
                        clip.tofile(tmpClipPath, 1, "utf8")

                        file.runwait(3600000, "notepad.exe", tmpClipPath)
                        clip.load(tmpClipPath)
                        clip.save(result)

                        clip.load(currentData)
                        file.deletenorecycle(currentData)
                        file.deletenorecycle(tmpClipPath)
                        keepRun = 1
                        break
                    case 6
                        local pathToSave = inputsaveaspath
                        if (pathToSave) do
                            local currentData = env("TEMP") ++ "\\tmp.PowerProClip"
                            clip.save(currentData)
                            clip.load(result)
                            clip.bmptofile(pathToSave)
                            clip.load(currentData)
                            file.deletenorecycle(currentData)
                        endif
                        break
                    case 7
                        do("explorer", "/select,\"" ++ result ++ "\"")
                        break
                    case 8
                        file.deletenorecycle(result)
                        break
                    case 9
                        local destFolder = inputfolder(baseFolder)
                        if (destFolder) do
                            if (find(destFolder, baseFolder) != -1) do
                                local pos = revfind(result, "\\")
                                local destPath = destFolder ++ slice(result, pos, length(result) - 1)
                                file.move(result, destPath, 1)
                            else
                                *Message The clip can only be moved under &(baseFolder).
                            endif
                        endif
                        break
                    case 10
                        local textToSearch = input("Search text")
                        if (textToSearch) do
                            local folder = pprofolder ++ "clip"
                            local defaultSize = 2000 * 1024 // in bytes
                            do("cmd.exe", "/c strings64 -s -b " ++ defaultSize ++ " " ++ "\"" ++ folder ++ "\" | findstr /m " ++ "\"" ++ textToSearch ++ "\" && pause")
                        endif
                        keepRun = 1
                        break
                    case 11
                        local textToSearch = input("Search with grepWin")
                        if (textToSearch) do
                            local folder = pprofolder ++ "clip"
                            do("grepWin.exe", "/searchpath:\"" ++ folder ++ "\" /searchfor:\"" ++ textToSearch ++ "\" /b:yes /u:yes /utf8:yes /execute")
                        endif
                        keepRun = 1
                        break
                    case 12
                        local textToSearch = input("Search with dnGrep")
                        if (textToSearch) do
                            local folder = pprofolder ++ "clip"
                            do(?+C:\Program Files\dnGrep\dnGREP.exe+, "/f \"" ++ folder ++ "\"" ++ " /pm *.PowerProClip" ++ " /s \"" ++ textToSearch ++ "\"")
                        endif
                        keepRun = 1
                        break
                    case 13
                        local ret = searchClipTextWithPwsh(baseFolder, baseFolderLen, inputTitle)
                        keepRun = !ret
                        break
                    case 14
                        *Clip ClearRecent
                        do("cmd.exe", "/c del /Q " ++ pprofolder ++ "clip\\captured\\*")
                        break
                endswitch

                run = keepRun
            endif
        else
            run = 0
        endif
    endfor

    win.resetfocus(15)
endfunction

function runStartApps(barName)
    local inputTitle = "Run apps"
    local inputHandle = window("visiblewindow", "*" ++ inputTitle ++ "*")
    if (win.exists(inputHandle)) do
        local rect = win.getrect(inputHandle)
        local x = word(rect, 1)
        local y = word(rect, 2)
        win.sendmouse("ab", x, y, "lc")
        quit
    endif

    if (cl.exists(barName)) do
        win.setfocus(cl.getBarHandle(barName))
    endif

    local tmpFile = env("TEMP") ++ "\\tmp_start_apps.txt"
    local cmd = "-Command \"Get-StartApps | ForEach-Object { \\\"$($_.Name),$($_.AppID)\\\"} | Out-File -FilePath " ++ tmpFile ++ "\""
    file.runwait(3600000, "pwsh.exe", cmd, "", "hide")
    local results = file.readall(tmpFile)
    local apps
    for each line item in results
        apps = apps ++ word(item, 1, ",") ++ "\r"
    endfor

    local appToRun = pickstring(apps, inputTitle, 2)
    if (appToRun) do
        local vecApps = vec.createFromLines(results)
        local idx = _pickedline_ - 1
        local appId = word(vecApps[idx], 2, ",")
        local cmdToRun = "shell:AppsFolder\\" ++ appId
        do("explorer.exe", cmdToRun)
    endif
    file.deletenorecycle(tmpFile)

    win.resetfocus(15)
endfunction